// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Define the database connection (MySQL in this case)
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma" // Consider uncommenting during development if you encounter foreign key constraint issues on migration
}

// Define the Prisma Client generator
generator client {
  provider = "prisma-client-js"
}

// --- Enums ---

enum Role {
  REGISTRY    // Super Admin
  COORDINATOR // Manages a specific Center
  LECTURER    // Submits claims within a Center
}

enum ClaimStatus {
  PENDING   // Submitted, awaiting review
  APPROVED  // Reviewed and approved by Coordinator
  REJECTED  // Reviewed and rejected by Coordinator
}

// Enum for different types of claims
enum ClaimType {
  TEACHING
  TRANSPORTATION
  THESIS_PROJECT // Combined Thesis/Project claim type
}

// Enum for transportation types
enum TransportType {
  PUBLIC
  PRIVATE
}

// Enum for thesis/project claim subtypes
enum ThesisType {
  SUPERVISION
  EXAMINATION
}

// Enum for different levels/ranks of thesis supervision
enum SupervisionRank {
  PHD
  MPHIL
  MA
  MSC
  BED
  BSC
  BA
  ED
  // Add other relevant ranks as needed
}


// --- Models ---

model User {
  id        String   @id @default(cuid()) // Unique ID
  email     String   @unique // Login email, must be unique
  name      String?          // User's full name (optional)
  password  String           // Hashed password
  role      Role             // User's role in the system
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation: If COORDINATOR, the Center they coordinate (one-to-one)
  coordinatedCenter Center?     @relation("CenterCoordinator")

  // Relation: If LECTURER, the Center they belong to (many-to-one)
  lecturerCenter    Center?     @relation("CenterLecturers", fields: [lecturerCenterId], references: [id], onDelete: SetNull) // If Center deleted, set lecturerCenterId to null
  lecturerCenterId  String?     // Foreign key

  // Relation: If LECTURER, the Department they belong to (many-to-one)
  department        Department? @relation("DepartmentLecturers", fields: [departmentId], references: [id], onDelete: SetNull) // If Department deleted, set departmentId to null
  departmentId      String?     // Foreign key

  // Relation: Claims submitted by this user (one-to-many)
  submittedClaims Claim[] @relation("LecturerClaims")

  // Relation: Claims processed by this user (one-to-many)
  processedClaims Claim[] @relation("CoordinatorClaims")

  // Relation: Students supervised by this user (one-to-many)
  supervisedStudents SupervisedStudent[] @relation("SupervisorStudents")

  // --- Block-level Indexes ---
  @@index([lecturerCenterId]) // Index for lecturer's center assignment
  @@index([departmentId])     // Index for lecturer's department assignment
}

model Center {
  id            String   @id @default(cuid()) // Unique ID
  name          String   @unique // Center name must be unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation: The Coordinator managing this Center (one-to-one enforced by unique constraint)
  coordinator   User   @relation("CenterCoordinator", fields: [coordinatorId], references: [id]) // Coordinator is required
  coordinatorId String @unique // Foreign key, ensures one coordinator per center

  // Relation: Lecturers belonging to this Center (one-to-many)
  lecturers   User[]       @relation("CenterLecturers")

  // Relation: Departments within this Center (one-to-many)
  departments Department[] @relation("CenterDepartments")

  // Relation: Claims associated with this Center (one-to-many)
  claims      Claim[]      @relation("CenterClaims")

  // --- Block-level Indexes ---
  // coordinatorId is already unique, which implies an index
}

model Department {
  id        String   @id @default(cuid()) // Unique ID
  name      String           // Department name
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation: The Center this Department belongs to (many-to-one)
  center   Center @relation("CenterDepartments", fields: [centerId], references: [id], onDelete: Cascade) // If Center deleted, delete Department
  centerId String // Foreign key

  // Relation: Lecturers belonging to this Department (one-to-many)
  lecturers User[] @relation("DepartmentLecturers")

  // --- Block-level Indexes ---
  @@index([centerId]) // Index for faster lookups by center

  // Constraint: Department names must be unique within the same center
  @@unique([name, centerId])
}

// --- Updated Claim Model ---
model Claim {
  id          String      @id @default(cuid()) // Unique ID

  // --- Common Fields ---
  claimType   ClaimType                  // *** NEW: Type of claim (non-optional) ***
  status      ClaimStatus @default(PENDING) // Current status
  submittedAt DateTime    @default(now())   // Timestamp submitted
  updatedAt   DateTime    @updatedAt        // Timestamp last updated
  processedAt DateTime?                     // Timestamp processed (approved/rejected)

  // --- Relationships ---
  // Relation: The User (Lecturer) who submitted this claim (many-to-one)
  submittedBy   User   @relation("LecturerClaims", fields: [submittedById], references: [id], onDelete: Cascade) // If Lecturer deleted, delete their claims
  submittedById String // Foreign key

  // Relation: The Center this claim belongs to (many-to-one)
  center        Center @relation("CenterClaims", fields: [centerId], references: [id], onDelete: Cascade) // If Center deleted, delete its claims
  centerId      String // Foreign key

  // Relation: The User (Coordinator) who processed this claim (many-to-one, optional)
  processedBy   User?   @relation("CoordinatorClaims", fields: [processedById], references: [id], onDelete: SetNull) // If Coordinator deleted, set processedById to null
  processedById String? // Foreign key (nullable)

  // --- Type-Specific Fields (all nullable) ---

  // ** TEACHING Fields ** (Used if claimType is TEACHING)
  teachingDate       DateTime? // Date of teaching session
  teachingStartTime  String?   // Start time (e.g., "HH:MM" format)
  teachingEndTime    String?   // End time (e.g., "HH:MM" format)
  teachingHours      Float?    // Calculated or entered contact hours

  // ** TRANSPORTATION Fields ** (Used if claimType is TRANSPORTATION)
  transportType          TransportType? // Public or Private
  transportDestinationTo   String?        // Destination 'To' location
  transportDestinationFrom String?        // Destination 'From' location
  transportRegNumber       String?        // Vehicle Registration Number (if private)
  transportCubicCapacity   Int?           // Vehicle Cubic Capacity (cc) (if private)
  transportAmount          Float?         // Specific amount claimed for transport (optional, might be calculated based on policy)

  // ** THESIS/PROJECT Fields ** (Used if claimType is THESIS_PROJECT)
  thesisType             ThesisType?    // Supervision or Examination
  // Supervision Details (only if thesisType is SUPERVISION)
  thesisSupervisionRank    SupervisionRank? // Rank/Level of supervision (e.g., PHD, MSC)
  // Relation: Students supervised under this specific claim (one-to-many)
  supervisedStudents     SupervisedStudent[] @relation("ClaimStudents")
  // Examination Details (only if thesisType is EXAMINATION)
  thesisExamCourseCode   String?    // Course code for examination
  thesisExamDate         DateTime?  // Date of examination

  // --- Block-level Indexes ---
  @@index([submittedById]) // Index foreign keys and common query fields
  @@index([centerId])
  @@index([processedById])
  @@index([claimType])
  @@index([status])
}

// --- NEW Model for Supervised Students ---
// Stores details of individual students supervised under a THESIS_PROJECT claim.
model SupervisedStudent {
  id        String @id @default(cuid()) // Unique ID for this supervision entry
  studentName String // Name of the student being supervised
  thesisTitle String // Title of the student's thesis/project

  // Relation: The specific Claim this supervision entry belongs to (many-to-one)
  claimId   String // Foreign key
  claim     Claim  @relation("ClaimStudents", fields: [claimId], references: [id], onDelete: Cascade) // If Claim deleted, delete this entry

  // Relation: The User (Lecturer) who is supervising (many-to-one)
  // This assumes the supervisor is the same as the claim submitter, which is typical.
  supervisorId String // Foreign key
  supervisor   User   @relation("SupervisorStudents", fields: [supervisorId], references: [id], onDelete: Cascade) // If Supervisor User deleted, delete this entry

  // --- Block-level Indexes ---
  @@index([claimId])      // Index foreign keys
  @@index([supervisorId])
}

